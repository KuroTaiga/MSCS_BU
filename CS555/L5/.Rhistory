install.packages(c("rmarkdown", "knitr"))
#install.packages("asbio")
# https://cran.r-project.org/web/packages/asbio/index.html
library(asbio)
#Compute z*
ConfLevel <- 0.99 #Define confidence level
LeftTail <- ConfLevel+(1-ConfLevel)/2
zStar <- qnorm(LeftTail)
rnorm(100,mean = 114, sd = 514)
rnorm(100,mean = 114, sd = i)
rnorm(100,mean = 114, sd = -1)
rnorm(100,mean = 114, sd = 514)
quantile(rnorm(100,mean = 114, sd = 514))
mean(rnorm(100,114,514))
mean(rnorm(100,1,10000))
mean(rnorm(100,1,10000))
mean(rnorm(100,1,10000))
mean(rnorm(100,1,10000))
sd(rnorm(100,1,100))
sd(rnorm(100,1,10000))
sd(rnorm(100,114,514))
sd(rnorm(100,114,514))
sd(rnorm(100,114,514))
sd(rnorm(100,114,514))
sd(rnorm(100,114,514))
sd(rnorm(100,114,514))
sd(rnorm(100,114,514))
sd(rnorm(100,114,514))
sd(rnorm(100,114,514))
#Compute z*
ConfLevel <- 0.99 #Define confidence level
LeftTail <- ConfLevel+(1-ConfLevel)/2
zStar <- qnorm(LeftTail)
dim()
a <- rnorm(rnorm(100,114,514) )
b <- sample(a, 49)
mean(b)
mean(a)
a <- rnorm(100,114,514)
b <- sample(a, 49)
mean(b)
mean(a)
b <- sample(a, 64)
mean(a)
mean(b)
3.6/6
3.5/6
2.576*3.5/6
92.83735-1.96*(sd(b)/8)
sd(b)
sd(a)
92.83735-1.96*(sd(a)/8)
1.96*sd(a)/8
a<-rnorm(100,10,10)
b<-sample(a,36)
sd(a)
sd(b)
mean(b)+1.96*10/8
mean(b)-1.96*10/8
mea(a)
mean(a)
mean(b)-1.645*10/8
mean(b)+1.645*10/8
qnorm(.1,lower.tail = F)
mean(b)-1.28*10/8
mean(b)+1.28*10/8
qnorm(.25,lower.tail = F)
(15/1*1.96)^2
ceiling((15/1*1.96)^2)
?one.sample.z
sd(a)
SD<-sd(a)
b <- sample(a,36)
mean(b)
bmean <- mean(b)
bmean <- 11
se = SD/6
critZ <- (mean(b)-bmean)/se
critZ <- (mean(b)-20)/se
one.sample.z(null.mu = 0, xbar = -2.98, sigma = 6, n=30,alternative = "one.sided")
one.sample.z(null.mu = 0, xbar = -2.98, sigma = 6, n=30,alternative = "less")
one.sample.z(null.mu = 155, xbar = 117, sigma = 30, n=100,alternative = "two.sided")
one.sample.z(null.mu = 115, xbar = 117, sigma = 30, n=100,alternative = "two.sided")
##Critical value approach
1.5967 > qnorm(0.975)
##P value approach
##replicate p value
pnorm(1.597, lower.tail = F)*2
##compare p value with alpha level
0.11 < 0.05
help("fit")
??fit
library(python)
install.packages("reticulate")
one.sample.z(null.mu = 42, xbar = 38.37524, sigma = 23.74226, n=36,alternative = "two.sided")
one.sample.z(null.mu = 42, xbar = 38.37524, sigma = 23.74226, n=36,alternative = "two.si")
one.sample.z(null.mu = 42, xbar = 38.37524, sigma = 23.74226, n=36,alternative = "less")
sigma <- 169
(xbar <- mean(sample))
(z <- qnorm(0.975))
(cl <- c(xbar-z*sigma/sqrt(40), xbar+z*sigma/sqrt(40)))
one.sample.z(null.mu=919, xbar=xbar, sigma=169,
n=40, alternative="two.sided", conf=0.95)
z <- qnorm(0.975)
sigma <- 4
m <- 0.5
n <- (z*sigma/m)^2
n
one.sample.z(null.mu=10, xbar=10.8, sigma=1,
n=30, alternative="greater", conf=0.95)
one.sample.z(null.mu=10, xbar=10.8, sigma=1,
n=30, alternative="greater")
zval <- (16.4-15)/(6.2/sqrt(50))
(zval <- (16.4-15)/(6.2/sqrt(50)))
##Critical value approach
1.5967 > qnorm(0.975)
kid_cal <- read.csv("kid_cal.csv")
summary(kid_cal)
Kid_mean <- kid_cal$trt
Kid_meal <- kid_cal$trt = T
kid_cal <- read.csv("kid_cal.csv")
Kid_meal <- kid_cal$trt = T
Kid_meal <- kid_cal[kid_cal$trt = T]
Kid_meal <- kid_cal[kid_cal$trt == T]
Kid_meal <- kid_cal$Calories[kid_cal$trt == T]
Kid_no_meal <- kid_cal$Calories[kid_cal$trt == F]
hist(Kid_meal)
par(mfrow = c(2,2))
hist(Kid_meal)
hist(Kid_no_meal)
knitr::opts_chunk$set(echo = TRUE)
hist(Kid_no_meal, main = "Calorie Distribution for Non-Participants",
xlab = "Calorie", freq = F)
hist(Kid_no_meal, main = "Calorie Distribution for Non-Participants",
xlab = "Calorie", ylab = "Child Count")
knitr::opts_chunk$set(echo = TRUE)
kid_cal <- read.csv("kid_cal.csv")
Kid_meal <- kid_cal$Calories[kid_cal$trt == T]
Kid_no_meal <- kid_cal$Calories[kid_cal$trt == F]
mealFrame <- data.frame(
Mean = mean(Kid_meal),
Median = median(Kid_meal),
SD = sd(Kid_meal),
First_Quantile = quantile(Kid_meal,.25)[[1]],
Third_Quantile = quantile(Kid_meal,.75)[[1]],
Min = min(Kid_meal),
Max = max(Kid_meal)
)
daysTable <- kable(mealFrame,"simple")
knitr::opts_chunk$set(echo = TRUE)
library(kableExtra)
kid_cal <- read.csv("kid_cal.csv")
Kid_meal <- kid_cal$Calories[kid_cal$trt == T]
Kid_no_meal <- kid_cal$Calories[kid_cal$trt == F]
mealFrame <- data.frame(
Mean = mean(Kid_meal),
Median = median(Kid_meal),
SD = sd(Kid_meal),
First_Quantile = quantile(Kid_meal,.25)[[1]],
Third_Quantile = quantile(Kid_meal,.75)[[1]],
Min = min(Kid_meal),
Max = max(Kid_meal)
)
daysTable <- kable(mealFrame,"simple")
par(mfrow = c(2,2))
hist(Kid_meal, main = "Calorie Distribution for Participants",
xlab = "Calorie", ylab = "Child Count")
hist(Kid_no_meal, main = "Calorie Distribution for Non-Participants",
xlab = "Calorie", ylab = "Child Count")
(mealTable <- kable(mealFrame,"simple"))
(mealTable <- kable(mealFrame,"simple", label = "Summary of Calorie for Participants of Meal Preparation"))
setwd("c:/bu/CSSE/CS555/L5")
open("./Lecture5(2).R")
library(ggplot2)
## study hour example ###############
student <- read.csv("students.csv")
ls
ls()
## study hour example ###############
student <- read.csv("students.csv")
student
attach(student)
summary(student)
#calculate sample correlation
cor(study.hours, score)
# basic scatterplot
plot(study.hours, score)
## study hour example ###############
student <- read.csv("students.csv")
student
attach(student)
# basic scatterplot
plot(study.hours, score)
# basic scatterplot
plot(study$hours, score)
# basic scatterplot
plot(student.hours, score)
# basic scatterplot
plot(student$hours, score)
# fancier scatterplot
plot(student$hours, score,
main="Scatterplot of exam score vs. hours of study",
xlab="Hours of study",
ylab="Score", xlim=c(0,10),
ylim=c(40,100), pch=18, col="red", cex.lab=1.5)
xbar<-mean(student$hours)
sdx <- sd(student$hours)
scoreBar <- mean(score)
scoreSD <- sd(score)
len(score)
size(score)
length(score)
(student$hours-xbar)/sdx
vecA<-(student$hours-xbar)/sdx
vacB<-(score-scoreBar)
vacB<-(score-scoreBar)/scoreSD
1/30*sum(vacB*vacA)
1/30*sum(vacB*vecA)
#calculate sample correlation
cor(student$hours, score)
cor(score, student$hours)
?ncor
?nlcor
library(nlcor)
install.packages(nlcor)
install.packages("nlcor")
library(nlcor)
library("nlcor")
