install.packages(c("rmarkdown", "knitr"))
#install.packages("asbio")
# https://cran.r-project.org/web/packages/asbio/index.html
library(asbio)
#Compute z*
ConfLevel <- 0.99 #Define confidence level
LeftTail <- ConfLevel+(1-ConfLevel)/2
zStar <- qnorm(LeftTail)
rnorm(100,mean = 114, sd = 514)
rnorm(100,mean = 114, sd = i)
rnorm(100,mean = 114, sd = -1)
rnorm(100,mean = 114, sd = 514)
quantile(rnorm(100,mean = 114, sd = 514))
mean(rnorm(100,114,514))
mean(rnorm(100,1,10000))
mean(rnorm(100,1,10000))
mean(rnorm(100,1,10000))
mean(rnorm(100,1,10000))
sd(rnorm(100,1,100))
sd(rnorm(100,1,10000))
sd(rnorm(100,114,514))
sd(rnorm(100,114,514))
sd(rnorm(100,114,514))
sd(rnorm(100,114,514))
sd(rnorm(100,114,514))
sd(rnorm(100,114,514))
sd(rnorm(100,114,514))
sd(rnorm(100,114,514))
sd(rnorm(100,114,514))
#Compute z*
ConfLevel <- 0.99 #Define confidence level
LeftTail <- ConfLevel+(1-ConfLevel)/2
zStar <- qnorm(LeftTail)
dim()
a <- rnorm(rnorm(100,114,514) )
b <- sample(a, 49)
mean(b)
mean(a)
a <- rnorm(100,114,514)
b <- sample(a, 49)
mean(b)
mean(a)
b <- sample(a, 64)
mean(a)
mean(b)
3.6/6
3.5/6
2.576*3.5/6
92.83735-1.96*(sd(b)/8)
sd(b)
sd(a)
92.83735-1.96*(sd(a)/8)
1.96*sd(a)/8
a<-rnorm(100,10,10)
b<-sample(a,36)
sd(a)
sd(b)
mean(b)+1.96*10/8
mean(b)-1.96*10/8
mea(a)
mean(a)
mean(b)-1.645*10/8
mean(b)+1.645*10/8
qnorm(.1,lower.tail = F)
mean(b)-1.28*10/8
mean(b)+1.28*10/8
qnorm(.25,lower.tail = F)
(15/1*1.96)^2
ceiling((15/1*1.96)^2)
?one.sample.z
sd(a)
SD<-sd(a)
b <- sample(a,36)
mean(b)
bmean <- mean(b)
bmean <- 11
se = SD/6
critZ <- (mean(b)-bmean)/se
critZ <- (mean(b)-20)/se
one.sample.z(null.mu = 0, xbar = -2.98, sigma = 6, n=30,alternative = "one.sided")
one.sample.z(null.mu = 0, xbar = -2.98, sigma = 6, n=30,alternative = "less")
one.sample.z(null.mu = 155, xbar = 117, sigma = 30, n=100,alternative = "two.sided")
one.sample.z(null.mu = 115, xbar = 117, sigma = 30, n=100,alternative = "two.sided")
##Critical value approach
1.5967 > qnorm(0.975)
##P value approach
##replicate p value
pnorm(1.597, lower.tail = F)*2
##compare p value with alpha level
0.11 < 0.05
help("fit")
??fit
library(python)
install.packages("reticulate")
one.sample.z(null.mu = 42, xbar = 38.37524, sigma = 23.74226, n=36,alternative = "two.sided")
one.sample.z(null.mu = 42, xbar = 38.37524, sigma = 23.74226, n=36,alternative = "two.si")
one.sample.z(null.mu = 42, xbar = 38.37524, sigma = 23.74226, n=36,alternative = "less")
sigma <- 169
(xbar <- mean(sample))
(z <- qnorm(0.975))
(cl <- c(xbar-z*sigma/sqrt(40), xbar+z*sigma/sqrt(40)))
one.sample.z(null.mu=919, xbar=xbar, sigma=169,
n=40, alternative="two.sided", conf=0.95)
z <- qnorm(0.975)
sigma <- 4
m <- 0.5
n <- (z*sigma/m)^2
n
one.sample.z(null.mu=10, xbar=10.8, sigma=1,
n=30, alternative="greater", conf=0.95)
one.sample.z(null.mu=10, xbar=10.8, sigma=1,
n=30, alternative="greater")
zval <- (16.4-15)/(6.2/sqrt(50))
(zval <- (16.4-15)/(6.2/sqrt(50)))
##Critical value approach
1.5967 > qnorm(0.975)
kid_cal <- read.csv("kid_cal.csv")
summary(kid_cal)
Kid_mean <- kid_cal$trt
Kid_meal <- kid_cal$trt = T
kid_cal <- read.csv("kid_cal.csv")
Kid_meal <- kid_cal$trt = T
Kid_meal <- kid_cal[kid_cal$trt = T]
Kid_meal <- kid_cal[kid_cal$trt == T]
Kid_meal <- kid_cal$Calories[kid_cal$trt == T]
Kid_no_meal <- kid_cal$Calories[kid_cal$trt == F]
hist(Kid_meal)
par(mfrow = c(2,2))
hist(Kid_meal)
hist(Kid_no_meal)
knitr::opts_chunk$set(echo = TRUE)
hist(Kid_no_meal, main = "Calorie Distribution for Non-Participants",
xlab = "Calorie", freq = F)
hist(Kid_no_meal, main = "Calorie Distribution for Non-Participants",
xlab = "Calorie", ylab = "Child Count")
knitr::opts_chunk$set(echo = TRUE)
kid_cal <- read.csv("kid_cal.csv")
Kid_meal <- kid_cal$Calories[kid_cal$trt == T]
Kid_no_meal <- kid_cal$Calories[kid_cal$trt == F]
mealFrame <- data.frame(
Mean = mean(Kid_meal),
Median = median(Kid_meal),
SD = sd(Kid_meal),
First_Quantile = quantile(Kid_meal,.25)[[1]],
Third_Quantile = quantile(Kid_meal,.75)[[1]],
Min = min(Kid_meal),
Max = max(Kid_meal)
)
daysTable <- kable(mealFrame,"simple")
knitr::opts_chunk$set(echo = TRUE)
library(kableExtra)
kid_cal <- read.csv("kid_cal.csv")
Kid_meal <- kid_cal$Calories[kid_cal$trt == T]
Kid_no_meal <- kid_cal$Calories[kid_cal$trt == F]
mealFrame <- data.frame(
Mean = mean(Kid_meal),
Median = median(Kid_meal),
SD = sd(Kid_meal),
First_Quantile = quantile(Kid_meal,.25)[[1]],
Third_Quantile = quantile(Kid_meal,.75)[[1]],
Min = min(Kid_meal),
Max = max(Kid_meal)
)
daysTable <- kable(mealFrame,"simple")
par(mfrow = c(2,2))
hist(Kid_meal, main = "Calorie Distribution for Participants",
xlab = "Calorie", ylab = "Child Count")
hist(Kid_no_meal, main = "Calorie Distribution for Non-Participants",
xlab = "Calorie", ylab = "Child Count")
(mealTable <- kable(mealFrame,"simple"))
(mealTable <- kable(mealFrame,"simple", label = "Summary of Calorie for Participants of Meal Preparation"))
library(car) #  Companion to Applied Regression
## Data handling
ceo <- read.csv("CEO_salary.csv")
head(ceo)
setwd("c:\BU/CSSE/CS555/L8/")
setwd("c:/BU/CSSE/CS555/L8/")
## Data handling
ceo <- read.csv("CEO_salary.csv")
head(ceo)
salary1 <- ceo$salary/1000
ceo1 <- data.frame(age=ceo$age,
height=ceo$height,
salary_in_k=salary1)
scatterplot(ceo1$salary_in_k~ceo1$age)
scatterplot(ceo1$salary_in_k~ceo1$height)
# Fit a Multiple Linear Regression model into data.
# Variables are Salary and age and store the resulted model into a variable for further use.
m <- lm(ceo1$salary_in_k~ceo1$age+ceo1$height)
m
resid(m)
par()              #Query Graphical Parameters
current <- par()   #save current settings
par(col.lab="red") #red x and y labels
par(mfrow=c(2,2))
plot(fitted(m), resid(m), axes=TRUE, frame.plot=TRUE, xlab='fitted values', ylab='residue')
plot(ceo1$age, resid(m), axes=TRUE, frame.plot=TRUE, xlab='age', ylab='residue')
plot(ceo1$height, resid(m), axes=TRUE, frame.plot=TRUE, xlab='height', ylab='residue')
hist(resid(m))
options(warn=-1)
par(current) # restore to the previous setting
##outlier test
##An outlier is a point with a large residual.
##An influential point is a point that has a large
##impact on the regression.
##They are not the same thing.
##A point can be an outlier
##without being influential.
##A point can be influential without being an outlier.
##A point can be both or neither.
outlierTest(m)
##influential test
# Option 1
b <- influence.measures(m)
c <- which(apply(b$is.inf, 1, any))
ceo1[rownames(ceo1) %in% c, ]
# Option 2
cd <- cooks.distance(m)
plot(m, which = 4)
plot(m, which = 5)
b.call
b$call
?apply
ceo1[rownames(ceo1) %in% c, ]
abline(h=cutoff,lty=2)
## rule of thumb
cutoff = 4/nrow(ceo1)
abline(h=cutoff,lty=2)
ceo1[cd > cutoff, ]
plot(m, which = 4)
plot(m, which = 5)
?plot
plot(m, which=1)
plot(m, which = 4)
## rule of thumb
cutoff = 4/nrow(ceo1)
abline(h=cutoff,lty=2)
?plot
# rgl Provides medium to high level functions for 3D interactive graphics,
# including functions
# modelled on base graphics (plot3d(), etc.) as well as functions for constructing representations of
# geometric objects (cube3d(), etc.). Output may be on screen using OpenGL, or to various standard
# 3D file formats including WebGL, PLY, OBJ, STL as well as 2D image formats, including PNG,
# Postscript, SVG, PGF.
install.packages("rgl")
library(rgl)
plot3d(ceo1$age, ceo1$height, ceo1$salary1,
type = "s", size = .75,
lit=FALSE, xlab="Age", ylab="Height",
zlab="Annual Salary")
plot3d(ceo1$age, ceo1$height, ceo1$salary1,
type = "s", size = .75,
lit=FALSE, xlab="Age", ylab="Height",
zlab="Annual Salary")
plot3d(ceo1$age, ceo1$height, ceo1$salary1,
type = "s", size = .75,
lit=FALSE, xlab="Age", ylab="Height",
zlab="Annual Salary")
#Multiple linear regression
m <- lm(salary1~age+height, data=ceo1)
summary(m)
anova(m)
confint(m, level=0.95)
par(mfrow = c(2,2))
plot(m)
par(mfrow = c(3,3))
plot(m)
par(mfrow = c(2,2))
plot(m)
plot(m, which = 2)
plot(m, which = 5)
plot(m, which = 6)
plot(m)
par(mflow(1,1))
par(mflow=c(1,1))
plot(m, which = 6)
plot(m, which = 7)
plot(m, which = 7)
plot(m)
plot(m, which = 5)
plot(m, which = 6)
?plot
vif(m)
?vif
# scatterplot matrix
panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor, ...)
{
usr <- par("usr")
on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits = digits)[1]
txt <- paste0(prefix, txt)
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * (1+r)/2)
}
# scatterplot matrix
panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor, ...)
{
usr <- par("usr")
on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits = digits)[1]
txt <- paste0(prefix, txt)
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * (1+r)/2)
}
panel.hist <- function(x, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(usr[1:2], 0, 1.5) )
h <- hist(x, plot = FALSE)
breaks <- h$breaks; nB <- length(breaks)
y <- h$counts; y <- y/max(y)
rect(breaks[-nB], 0, breaks[-1], y, col = "cyan", ...)
}
panel.lm <- function(x, y,col=par('col'),bg=NA, pch=par('pch'), cex=1,col.smooth='red', ...)
{
points(x, y, pch=pch, col=col, bg=bg, cex=cex)
abline(stats::lm(y~x), col=col.smooth, ...)
}
options(warn=-1)
pairs(ceo1, upper.panel=panel.cor,
diag.panel=panel.hist, lower.panel=panel.lm)
vif(m)
h <- read.csv("Height_Collinearity.csv")
head(h)
summary(lm(Height ~ Age + Grade, data = h))
vif(lm(Height ~ Age + Grade, data = h))
summary(mvif<-lm(Height ~ Age + Grade, data = h))
vif(mvif)
?vif
alias(mvif)
gc()
